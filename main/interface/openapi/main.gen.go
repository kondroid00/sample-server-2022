// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// User defines model for User.
type User struct {
	Email *openapi_types.Email `json:"email,omitempty"`
	Id    *int64               `json:"id,omitempty"`
	Name  string               `json:"name"`
	State *string              `json:"state,omitempty"`
}

// PostUserJSONBody defines parameters for PostUser.
type PostUserJSONBody struct {
	Email string `json:"email"`
	Name  string `json:"name"`
}

// PatchUsersUserIdJSONBody defines parameters for PatchUsersUserId.
type PatchUsersUserIdJSONBody struct {
	Email *string `json:"email,omitempty"`
	Name  string  `json:"name"`
}

// PostUserJSONRequestBody defines body for PostUser for application/json ContentType.
type PostUserJSONRequestBody PostUserJSONBody

// PatchUsersUserIdJSONRequestBody defines body for PatchUsersUserId for application/json ContentType.
type PatchUsersUserIdJSONRequestBody PatchUsersUserIdJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// healthcheck
	// (GET /healthcheck)
	GetHealthcheck(ctx echo.Context) error
	// Create New User
	// (POST /user)
	PostUser(ctx echo.Context) error
	// Get User Info by User ID
	// (GET /users/{userId})
	GetUsersUserId(ctx echo.Context, userId int) error
	// Update User Information
	// (PATCH /users/{userId})
	PatchUsersUserId(ctx echo.Context, userId int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetHealthcheck converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealthcheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealthcheck(ctx)
	return err
}

// PostUser converts echo context to params.
func (w *ServerInterfaceWrapper) PostUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUser(ctx)
	return err
}

// GetUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersUserId(ctx, userId)
	return err
}

// PatchUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchUsersUserId(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/healthcheck", wrapper.GetHealthcheck)
	router.POST(baseURL+"/user", wrapper.PostUser)
	router.GET(baseURL+"/users/:userId", wrapper.GetUsersUserId)
	router.PATCH(baseURL+"/users/:userId", wrapper.PatchUsersUserId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xXT2/jthP9KsT8fkfZlp10kei0m6a7NYomi6DpZZEDLY0sbiRSS46TGIa+ezGkLP+R",
	"jKKIe+lJFmc4nHlv5lHeQGqq2mjU5CDZgEsLrKT/+ejQ8hPfZFWX6CD5tgGspCohAefXPra2cWoqiEBl",
	"kMQRaFlh5wIROJK0cpCATEm9IDRPEdTW1GhJoT+qjbqB3NhKEiTtSgS0rn0sskovoQln7PkpTR8uIQKL",
	"MrvX5RoSsivs9ilNuETLG0NWm35ETm/I0nDUHytlMYPkGx/cBnmKgBSV7Osx6k4zi++YEkTwNuKDrZZl",
	"yKfhYErnxh/T7q2k0hDBC1qnjIYEpuOY8zE1alkrSOBizEsR1JIKj9OkQFlSkRaYPvP7EokfGbrUqppC",
	"mH0fH81KtswzSOAL0q8HZouuNtoFGmZxzI/UaELtI8u6LlXq90++Ow6/3w/d79GUX15kueLC7n/z4IVW",
	"GgK2iY5S3u5YVZW0614NfTgjmKza9qyNGwDhZ4uSUEih8VWw67iHxVfjqOWPeUZHNyZbnwGAv5mSw/Fo",
	"DqE6MRe9pj3RzUc9672iNszTUJ+erOUsg+6L24fwrSp3KrOXf5vRQGswS4IKFBpTdE7atcgVlpkTubHe",
	"8OnrXJARaZ/x5t39fYevgntE3JiF+IxlaV4PiA6H3noBgVk8i0fT6Wh6BRFkkvA+v1GWCh7t6+sPo/hq",
	"NLvs6EhgYRbj3Mf8uOSlFlxv/hOtyhWzmMvSYQS5so7uAuA3ZtGSMJ1FUMrO0GZ41FP/t5hDAv+b7KR+",
	"0ur8xA/AAOy+6DBEGeN4GaA7dPpdOaf0Ujy0LSfmOggzm/2m6/6mX7g88alkxV6LP+Qz6qPhb2d3iz10",
	"4+4mG37Ms+ak+D0gWYUv6DtD7dIRJvdLvF+8Kir8WyUpLbgCvzy/HQ8JJufgHv25/45gnm3Y3kt6T4a/",
	"IIX2Z2LFYt2+3DK5tbSyQkIbPgwOI80zBlxqgW/K0RZhhlexmS+0nRKudthupStc4j2Z6K5z/wnB5PU7",
	"4LHm0RvifyidoyuBQx7z/R++Gs54JfRSH5ByRjeM2q4Wlu6Vp+wceh3Iz0KfPuAC01SKG/kcPhVOyfb0",
	"utPmY9m++mk0jUfxbE+2bQj7DzW7TWar2xcHuh0yPJdstyAEBb4cmBB2ujMkPpuVzt4h1O2odQrRSb93",
	"Q/uyFYeVZeAKojqZTEqTyrIwjpKLOI79v4G3kSNTl2pZeJYZIajz1NLMrH+k5lpC0/wVAAD//2P4TXSq",
	"DAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
